import sympy as sp
import metodos.bisseccao
import metodos.falsaPosicao
import metodos.secante
import metodos.newton

x = sp.Symbol('x')

def tests(a:float, b: float, x0: float, x1: float, func: sp.Expr, precisao: float, iteracoes: int):
    # Calcular a derivada da fun√ß√£o para Newton-Raphson
    derivada = sp.diff(func, x)
    
    # M√©todo da Bissec√ß√£o
    print("\n1. M√âTODO DA BISSEC√á√ÉO")
    print("-" * 30)
    resultado_biss = metodos.bisseccao.bisseccao(a, b, iteracoes, func, precisao)
    print(f"Resultado: {resultado_biss}")
    if resultado_biss[0] != -1:
        print(f"‚úÖ Raiz encontrada: {resultado_biss[1]:.8f}")
        print(f"üìä Itera√ß√µes: {resultado_biss[0] + 1}")
        
        # Verifica√ß√£o
        verificacao = func.subs(x, resultado_biss[1])
        print(f"üîç Verifica√ß√£o f({resultado_biss[1]:.8f}) = {float(verificacao):.2e}")
    else:
        print("‚ùå Raiz n√£o encontrada no n√∫mero m√°ximo de itera√ß√µes")
    
    # M√©todo da Falsa Posi√ß√£o
    print("\n2. M√âTODO DA FALSA POSI√á√ÉO")
    print("-" * 30)
    resultado_fp = metodos.falsaPosicao.falsaPosicao(a, b, func, precisao, iteracoes)
    print(f"Resultado: {resultado_fp}")
    if resultado_fp[0] != -1:
        print(f"‚úÖ Raiz encontrada: {resultado_fp[1]:.8f}")
        print(f"üìä Itera√ß√µes: {resultado_fp[0] + 1}")
        
        # Verifica√ß√£o
        verificacao = func.subs(x, resultado_fp[1])
        print(f"üîç Verifica√ß√£o f({resultado_fp[1]:.8f}) = {float(verificacao):.2e}")
    else:
        print("‚ùå Raiz n√£o encontrada no n√∫mero m√°ximo de itera√ß√µes")
    
    # M√©todo da Secante
    print("\n3. M√âTODO DA SECANTE")
    print("-" * 30)
    try:
        resultado_sc = metodos.secante.secante(x0, x1, func, precisao, iteracoes)
        print(f"Resultado: {resultado_sc}")
        if resultado_sc[0] != -1:
            print(f"‚úÖ Raiz encontrada: {resultado_sc[1]:.8f}")
            print(f"üìä Itera√ß√µes: {resultado_sc[0] + 1}")
            
            # Verifica√ß√£o
            verificacao = func.subs(x, resultado_sc[1])
            print(f"üîç Verifica√ß√£o f({resultado_sc[1]:.8f}) = {float(verificacao):.2e}")
        else:
            print("‚ùå Raiz n√£o encontrada no n√∫mero m√°ximo de itera√ß√µes")
    except Exception as e:
        print(f"‚ùå Erro no m√©todo da secante: {e}")
        resultado_sc = [-1, 0]

    # M√©todo de Newton-Raphson
    print("\n4. M√âTODO DE NEWTON-RAPHSON")
    print("-" * 30)
    print(f"Derivada: f'(x) = {derivada}")
    try:
        resultado_newton = metodos.newton.newton(x0, func, derivada, precisao, iteracoes)
        print(f"Resultado: {resultado_newton}")
        if resultado_newton[0] != -1:
            print(f"‚úÖ Raiz encontrada: {resultado_newton[1]:.8f}")
            print(f"üìä Itera√ß√µes: {resultado_newton[0] + 1}")
            
            # Verifica√ß√£o
            verificacao = func.subs(x, resultado_newton[1])
            print(f"üîç Verifica√ß√£o f({resultado_newton[1]:.8f}) = {float(verificacao):.2e}")
            
            # Verifica√ß√£o da derivada no ponto
            verificacao_deriv = derivada.subs(x, resultado_newton[1])
            print(f"üìà f'({resultado_newton[1]:.8f}) = {float(verificacao_deriv):.2e}")
        else:
            print("‚ùå Raiz n√£o encontrada no n√∫mero m√°ximo de itera√ß√µes")
    except Exception as e:
        print(f"‚ùå Erro no m√©todo de Newton-Raphson: {e}")
        resultado_newton = [-1, 0]

    # AN√ÅLISE DE EFICI√äNCIA MELHORADA
    print("\n" + "=" * 60)
    print("                AN√ÅLISE DE EFICI√äNCIA")
    print("=" * 60)
    
    # Coletar dados dos m√©todos que convergiram
    metodos_data = []
    
    if resultado_biss[0] != -1:
        metodos_data.append(("Bissec√ß√£o", resultado_biss[0] + 1, resultado_biss[1]))
    
    if resultado_fp[0] != -1:
        metodos_data.append(("Falsa Posi√ß√£o", resultado_fp[0] + 1, resultado_fp[1]))
    
    if resultado_sc[0] != -1:
        metodos_data.append(("Secante", resultado_sc[0] + 1, resultado_sc[1]))
    
    if resultado_newton[0] != -1:
        metodos_data.append(("Newton-Raphson", resultado_newton[0] + 1, resultado_newton[1]))
    
    # Verificar se algum m√©todo convergiu
    if not metodos_data:
        print("‚ùå NENHUM M√âTODO CONVERGIU!")
        return
    
    # Ordenar por n√∫mero de itera√ß√µes (menor = mais eficiente)
    metodos_data.sort(key=lambda x: x[1])
    
    # Exibir tabela de resultados
    print("\nüìä TABELA DE RESULTADOS:")
    print("-" * 70)
    print(f"{'Posi√ß√£o':<8} {'M√©todo':<16} {'Itera√ß√µes':<12} {'Raiz':<15}")
    print("-" * 70)
    
    for i, (metodo, iter_count, raiz) in enumerate(metodos_data, 1):
        if i == 1:
            emoji = "ü•á"  # Ouro
        elif i == 2:
            emoji = "ü•à"  # Prata
        elif i == 3:
            emoji = "ü•â"  # Bronze
        else:
            emoji = "üèÖ"  # Men√ß√£o honrosa
            
        print(f"{emoji} {i}¬∫     {metodo:<16} {iter_count:<12} {raiz:<15.8f}")
    
    print("-" * 70)
    
    # An√°lise detalhada
    print(f"\nüèÜ M√âTODO MAIS EFICIENTE: {metodos_data[0][0].upper()}")
    print(f"   ‚Ä¢ Convergiu em apenas {metodos_data[0][1]} itera√ß√µes")
    print(f"   ‚Ä¢ Raiz encontrada: {metodos_data[0][2]:.8f}")
    
    # Compara√ß√µes detalhadas
    if len(metodos_data) > 1:
        print(f"\nüìà COMPARA√á√ïES:")
        melhor_metodo = metodos_data[0]
        
        for i in range(1, len(metodos_data)):
            metodo_atual = metodos_data[i]
            diferenca = metodo_atual[1] - melhor_metodo[1]
            if melhor_metodo[1] > 0:
                percentual = ((metodo_atual[1] - melhor_metodo[1]) / melhor_metodo[1]) * 100
                print(f"   ‚Ä¢ {melhor_metodo[0]} foi {diferenca} itera√ß√µes mais r√°pido que {metodo_atual[0]}")
                print(f"     (Redu√ß√£o de {percentual:.1f}% nas itera√ß√µes)")
    
    # Estat√≠sticas gerais
    total_iter = sum(data[1] for data in metodos_data)
    media_iter = total_iter / len(metodos_data)
    
    print(f"\nüìä ESTAT√çSTICAS GERAIS:")
    print(f"   ‚Ä¢ Total de m√©todos que convergiram: {len(metodos_data)}")
    print(f"   ‚Ä¢ M√©dia de itera√ß√µes: {media_iter:.1f}")
    print(f"   ‚Ä¢ Melhor performance: {metodos_data[0][1]} itera√ß√µes")
    print(f"   ‚Ä¢ Pior performance: {metodos_data[-1][1]} itera√ß√µes")
    
    # An√°lise por efici√™ncia relativa
    if len(metodos_data) > 1:
        print(f"\n‚ö° EFICI√äNCIA RELATIVA:")
        base_iter = metodos_data[0][1]  # Melhor m√©todo como base
        
        for metodo, iter_count, _ in metodos_data:
            if iter_count == base_iter:
                eficiencia = 100.0
                status = "üî• M√ÅXIMA"
            else:
                eficiencia = (base_iter / iter_count) * 100
                if eficiencia >= 80:
                    status = "‚úÖ ALTA"
                elif eficiencia >= 60:
                    status = "‚ö†Ô∏è  M√âDIA"
                else:
                    status = "‚ùå BAIXA"
            
            print(f"   ‚Ä¢ {metodo:<16}: {eficiencia:6.1f}% {status}")
    
    # An√°lise espec√≠fica dos m√©todos
    print(f"\nüî¨ AN√ÅLISE ESPEC√çFICA DOS M√âTODOS:")
    print(f"   ‚Ä¢ Bissec√ß√£o: M√©todo robusto, sempre converge se h√° mudan√ßa de sinal")
    print(f"   ‚Ä¢ Falsa Posi√ß√£o: Melhora a bissec√ß√£o usando interpola√ß√£o linear")
    print(f"   ‚Ä¢ Secante: Aproxima a derivada numericamente")
    print(f"   ‚Ä¢ Newton-Raphson: Converg√™ncia quadr√°tica quando pr√≥ximo da raiz")